// SPDX-License-Identifier: MIT
pragma solidity 0.8.24;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "../interfaces/IDOVEAdmin.sol";
import "../interfaces/IDOVEInfo.sol";
import "./DOVEFees.sol";
import "../utils/FeeLibrary.sol";
import "../errors/DOVEErrors.sol";

/**
 * @title DOVE Token
 * @dev DOVE token implementation with reflection mechanics, anti-whale, and fee distribution
 * Version 2.0 with pre-allocated token distribution
 */
contract DOVEv2 is ERC20, AccessControl, Pausable, ReentrancyGuard {
    // ================ Events ================
    
    event Launch(uint256 timestamp);
    event Launched();
    event SecondaryContractsSet(address infoContract);
    event ExcludedFromFee(address indexed account, bool excluded);
    event ExcludedFromMaxWalletLimit(address indexed account, bool excluded);
    event DexStatusChanged(address indexed account, bool status);
    event MaxTxLimitDisabled();
    event MaxWalletLimitDisabled();
    event CharityWalletUpdated(address indexed oldWallet, address indexed newWallet);
    event EarlySellTaxDisabled();
    
    // Using centralized custom errors from DOVEErrors.sol
    // ZeroAddress, TransferExceedsMaxAmount, TransferExceedsMaxWalletLimit declared in DOVEErrors
    
    // ================ Constants ================
    
    // Total supply: 100 billion tokens (100,000,000,000 with 18 decimals)
    uint256 public constant TOTAL_SUPPLY = 100_000_000_000 * 10**18;
    
    // Dead address for burn
    address public constant DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;
    
    // ================ State Variables ================
    
    // Max transaction amount (cached)
    uint256 private _maxTransactionAmount;
    
    // Flag for max transaction limit
    bool private _isMaxTxLimitEnabled = true;
    
    // Flag for max wallet limit
    bool private _isMaxWalletLimitEnabled = true;
    
    // Admin contract reference
    IDOVEAdmin private _adminContract;
    
    // Fee manager contract
    DOVEFees private immutable _feeManager;
    
    // Info contract reference (after set secondary contracts)
    IDOVEInfo private _infoContract;
    
    // Flag to track fee processing state (prevents reentrancy)
    bool private _inProcessingFees;
    
    // State of full contract initialization
    bool private _fullyInitialized;
    
    // Mappings
    mapping(address => bool) private _isDex;
    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => bool) private _isExcludedFromMaxLimit;
    mapping(address => bool) private _alwaysFeeExempt;
    
    // ================ Events ================
    
    // Events are defined in DOVEEvents.sol
    
    // ================ Constructor ================
    
    /**
     * @dev Constructor that initializes the token and mints supply to allocation wallets
     * @param adminContract Admin contract address
     * @param charityWallet Charity wallet address
     */
    constructor(address adminContract, address charityWallet) ERC20("DOVE", "DOVE") {
        if (adminContract == address(0)) {
            revert DOVEErrors.ZeroAddress();
        }
        if (charityWallet == address(0)) {
            revert DOVEErrors.ZeroAddress();
        }
        
        // Set admin contract
        _adminContract = IDOVEAdmin(adminContract);
        
        // Calculate max transaction amount (1% of total supply)
        _maxTransactionAmount = TOTAL_SUPPLY / 100;
        
        // Create and set up fee manager
        _feeManager = new DOVEFees(address(this), charityWallet);
        
        // ==================== TOKEN ALLOCATION ====================
        
        // Founder/Team (7.5% of supply)
        _mint(0x20a43d9D1969206E9778D890a3191361903252c0, 7_500_000_000 * 10**18);
        
        // Liquidity Provision (38% of supply)
        _mint(0xd02AC8129309a9c24392d04Bf06d827eC25888Fe, 38_000_000_000 * 10**18);
        
        // Community & Airdrops (16% of supply)
        _mint(0x083CA3260DA3018DF4EAFe910F45445ABF2c7897, 16_000_000_000 * 10**18);
        
        // Ecosystem Development Fund (10% of supply)
        _mint(0x35C8D89F79faee563B2ff272d66195016d6fdFc0, 10_000_000_000 * 10**18);
        
        // Marketing & Partnerships (7.5% of supply)
        _mint(0xD268D34DC023Bcb3C2300B60494A75b3a4022997, 7_500_000_000 * 10**18);
        
        // CEX-Listing Reserve (5% of supply)
        _mint(0x6Bb8d0a50D03B26F59037b0C18837018Af2af58E, 5_000_000_000 * 10**18);
        
        // Bug-Bounty & Security (2.5% of supply)
        _mint(0x88892C8d9E07c4c2F812356ce012e2ED585be5D7, 2_500_000_000 * 10**18);
        
        // Treasury/Ops Buffer (3.5% of supply)
        _mint(0xa689eaD23b671CAbF0E79cc59E0C8a6B937d5309, 3_500_000_000 * 10**18);
        
        // Charity Pool (2% of supply)
        _mint(0xb29984ef12F790B8908Bc1Ca17a9eD9238Aa46f7, 2_000_000_000 * 10**18);
        
        // Referral/Promo Pool (1% of supply)
        _mint(0x409b2254E9B09b162Db2f0b5621A0D06466B5C97, 1_000_000_000 * 10**18);
        
        // ==========================================================
        
        // Mark special addresses as always fee exempt
        _alwaysFeeExempt[DEAD_ADDRESS] = true;
        _alwaysFeeExempt[charityWallet] = true;
        
        // Mark all allocation wallets as excluded from max wallet limits to ensure they can receive their full allocations
        _isExcludedFromMaxLimit[0x20a43d9D1969206E9778D890a3191361903252c0] = true; // Founder/Team
        _isExcludedFromMaxLimit[0xd02AC8129309a9c24392d04Bf06d827eC25888Fe] = true; // Liquidity
        _isExcludedFromMaxLimit[0x083CA3260DA3018DF4EAFe910F45445ABF2c7897] = true; // Community
        _isExcludedFromMaxLimit[0x35C8D89F79faee563B2ff272d66195016d6fdFc0] = true; // Ecosystem
        _isExcludedFromMaxLimit[0xD268D34DC023Bcb3C2300B60494A75b3a4022997] = true; // Marketing
        _isExcludedFromMaxLimit[0x6Bb8d0a50D03B26F59037b0C18837018Af2af58E] = true; // CEX-Listing
        _isExcludedFromMaxLimit[0x88892C8d9E07c4c2F812356ce012e2ED585be5D7] = true; // Bug-Bounty
        _isExcludedFromMaxLimit[0xa689eaD23b671CAbF0E79cc59E0C8a6B937d5309] = true; // Treasury
        _isExcludedFromMaxLimit[0xb29984ef12F790B8908Bc1Ca17a9eD9238Aa46f7] = true; // Charity
        _isExcludedFromMaxLimit[0x409b2254E9B09b162Db2f0b5621A0D06466B5C97] = true; // Referral/Promo
        
        // Grant ADMIN_ROLE to the admin contract
        _grantRole(DEFAULT_ADMIN_ROLE, adminContract);
        
        // Initialize token in paused state
        _pause();
    }
    
    // ================ Modifiers ================
    
    /**
     * @dev Restricts function to admin contract
     */
    modifier onlyAdmin() {
        require(msg.sender == address(_adminContract), "Only admin contract can call");
        _;
    }
    
    // ================ External Admin Functions ================
    
    /**
     * @dev Sets additional contract references
     * @param infoContract Info contract address
     * @return Success status
     */
    function setSecondaryContracts(
        address infoContract
    ) external onlyAdmin returns (bool) {
        require(infoContract != address(0), "Info contract cannot be zero address");
        
        _infoContract = IDOVEInfo(infoContract);
        _fullyInitialized = true;
        
        emit SecondaryContractsSet(infoContract);
        return true;
    }
    
    /**
     * @dev Pause transfers
     * @return Success status
     */
    function pause() external onlyAdmin returns (bool) {
        _pause();
        return true;
    }
    
    /**
     * @dev Unpause transfers
     * @return Success status
     */
    function unpause() external onlyAdmin returns (bool) {
        _unpause();
        return true;
    }
    
    /**
     * @dev Launch token by unpausing
     * @return Success status
     */
    function launch() external onlyAdmin returns (bool) {
        _unpause();
        
        // Record launch timestamp in fee manager
        _feeManager.recordLaunch();
        
        emit Launched();
        return true;
    }
    
    /**
     * @dev Exclude/include address from fee
     * @param account Address to configure
     * @param excluded Whether to exclude from fees
     */
    function setExcludedFromFee(address account, bool excluded) external onlyAdmin {
        require(account != address(0), "Cannot set zero address");
        _isExcludedFromFee[account] = excluded;
        emit ExcludedFromFee(account, excluded);
    }
    
    /**
     * @dev Exclude/include address from max wallet limit
     * @param account Address to configure
     * @param excluded Whether to exclude from max wallet limit
     */
    function setExcludedFromMaxWalletLimit(address account, bool excluded) external onlyAdmin {
        require(account != address(0), "Cannot set zero address");
        _isExcludedFromMaxLimit[account] = excluded;
        emit ExcludedFromMaxWalletLimit(account, excluded);
    }
    
    /**
     * @dev Set DEX status for an address
     * @param account Address to set as DEX
     * @param isDexStatus Whether the address is a DEX
     */
    function setIsDex(address account, bool isDexStatus) external onlyAdmin {
        require(account != address(0), "Cannot set zero address");
        _isDex[account] = isDexStatus;
        emit DexStatusChanged(account, isDexStatus);
    }
    
    /**
     * @dev Disable max transaction limit
     * This should only be called by admin contract
     */
    function disableMaxTxLimit() external onlyAdmin {
        _isMaxTxLimitEnabled = false;
        // Also set max transaction amount to max uint256 to ensure consistency
        _maxTransactionAmount = type(uint256).max;
        emit MaxTxLimitDisabled();
    }
    
    /**
     * @dev Disable max wallet limit
     * This should only be called by admin contract
     */
    function disableMaxWalletLimit() external onlyAdmin {
        _isMaxWalletLimitEnabled = false;
        emit MaxWalletLimitDisabled();
    }
    
    // ================ Public/External View Functions ================
    
    /**
     * @dev Check if an address is marked as a DEX
     * @param account Address to check
     * @return Whether the address is marked as a DEX
     */
    function isDex(address account) external view returns (bool) {
        return _isDex[account];
    }
    
    /**
     * @dev Check if an address is excluded from fees
     * @param account Address to check
     * @return Whether the address is excluded from fees
     */
    function isExcludedFromFee(address account) external view returns (bool) {
        return _isExcludedFromFee[account] || _alwaysFeeExempt[account];
    }
    
    /**
     * @dev Check if an address is excluded from max wallet limit
     * @param account Address to check
     * @return Whether the address is excluded from max wallet limit
     */
    function isExcludedFromMaxWalletLimit(address account) external view returns (bool) {
        return _isExcludedFromMaxLimit[account] || _alwaysFeeExempt[account];
    }
    
    /**
     * @dev Get max transaction amount
     * @return Max transaction amount
     */
    function getMaxTransactionAmount() external view returns (uint256) {
        if (!_fullyInitialized) {
            return _maxTransactionAmount;
        }
        return _infoContract.getMaxTransactionAmount();
    }
    
    /**
     * @dev Get whether max transaction limit is enabled
     * @return Whether max transaction limit is enabled
     */
    function isMaxTxLimitEnabled() external view returns (bool) {
        // Only use local state for simplicity
        return _isMaxTxLimitEnabled;
    }
    
    /**
     * @dev Get whether max wallet limit is enabled
     * @return Whether max wallet limit is enabled
     */
    function isMaxWalletLimitEnabled() external view returns (bool) {
        // Only use local state for simplicity
        return _isMaxWalletLimitEnabled;
    }
    
    /**
     * @dev Get the fee manager contract address
     * @return Fee manager address
     */
    function getFeeManager() external view returns (address) {
        return address(_feeManager);
    }
    
    /**
     * @dev Emit charity wallet updated event (IDOVE compatibility)
     * @param oldWallet Old charity wallet address
     * @param newWallet New charity wallet address
     */
    function emitCharityWalletUpdated(address oldWallet, address newWallet) external {
        require(msg.sender == address(_feeManager), "Only fee manager can call");
        emit CharityWalletUpdated(oldWallet, newWallet);
    }
    
    /**
     * @dev Emit excluded from fee updated event (IDOVE compatibility)
     * @param account Address that was excluded
     * @param excluded Whether the address is excluded
     */
    function emitExcludedFromFeeUpdated(address account, bool excluded) external {
        require(msg.sender == address(_feeManager), "Only fee manager can call");
        emit ExcludedFromFee(account, excluded);
    }
    
    /**
     * @dev Emit DEX status updated event (IDOVE compatibility)
     * @param dexAddress Address that was updated
     * @param dexStatus Whether the address is a DEX
     */
    function emitDexStatusUpdated(address dexAddress, bool dexStatus) external {
        require(msg.sender == address(_feeManager), "Only fee manager can call");
        emit DexStatusChanged(dexAddress, dexStatus);
    }
    
    /**
     * @dev Emit early sell tax disabled event (IDOVE compatibility)
     */
    function emitEarlySellTaxDisabled() external {
        require(msg.sender == address(_feeManager), "Only fee manager can call");
        emit EarlySellTaxDisabled();
    }
    
    /**
     * @dev Check if an address is always exempt from fees (IDOVE compatibility)
     * @param account Address to check
     * @return Whether the address is always exempt from fees
     */
    function isAlwaysFeeExempt(address account) external view returns (bool) {
        return _alwaysFeeExempt[account];
    }
    
    /**
     * @dev Transfer fee from contract to recipient (for DOVEFees compatibility)
     * @param from Address to deduct from
     * @param to Recipient address
     * @param amount Amount to transfer
     * @return Whether the transfer was successful
     */
    function transferFeeFromContract(address from, address to, uint256 amount) external returns (bool) {
        require(msg.sender == address(_feeManager), "Only fee manager can call");
        super._transfer(from, to, amount);
        return true;
    }
    
    /**
     * @dev Burn fee amount (for DOVEFees compatibility)
     * @param from Address to deduct from
     * @param amount Amount to burn
     * @return Whether the burn was successful
     */
    function burnFeeFromContract(address from, uint256 amount) external returns (bool) {
        require(msg.sender == address(_feeManager), "Only fee manager can call");
        super._transfer(from, DEAD_ADDRESS, amount);
        return true;
    }
    
    // ================ Internal Functions ================
    
    /**
     * @dev Override ERC20 _transfer function to add DOVE token functionality
     * @param sender Address sending tokens
     * @param recipient Address receiving tokens
     * @param amount Amount of tokens to transfer
     */
    // ERC20 _beforeTokenTransfer override handled at the end of the contract
    
    /**
     * @dev Override ERC20 _transfer function to add DOVE token functionality
     * @param sender Address sending tokens
     * @param recipient Address receiving tokens
     * @param amount Amount of tokens to transfer
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal override whenNotPaused {
        if (sender == address(0)) {
            revert DOVEErrors.ZeroAddress();
        }
        if (recipient == address(0)) {
            revert DOVEErrors.ZeroAddress();
        }
        
        // Use local max transaction amount
        uint256 maxAmount = _maxTransactionAmount;
        if (_fullyInitialized) {
            try _infoContract.getMaxTransactionAmount() returns (uint256 txAmount) {
                maxAmount = txAmount;
            } catch {
                // If call fails, use local state
                maxAmount = _maxTransactionAmount;
            }
        }
        
        // Check if max transaction is enabled
        bool maxTxEnabled = _isMaxTxLimitEnabled;
        
        if (maxTxEnabled && amount > maxAmount) {
            revert DOVEErrors.TransferExceedsMaxAmount();
        }
        
        // Enforce max wallet limit if enabled
        bool maxWalletEnabled = _isMaxWalletLimitEnabled;
        
        if (maxWalletEnabled) {
            // Skip limit for transfers to/from DEAD_ADDRESS or to charity wallet
            bool isExemptFromWalletLimit = 
                recipient == DEAD_ADDRESS || 
                recipient == _feeManager.getCharityWallet() ||
                _isExcludedFromMaxLimit[recipient] ||
                _alwaysFeeExempt[recipient];
                
            if (!isExemptFromWalletLimit) {
                uint256 recipientBalance = balanceOf(recipient);
                // Use fixed max wallet amount (1% of initial supply) to prevent issues after burns
                uint256 maxWalletAmount = TOTAL_SUPPLY / 100; // 1% of initial total supply
                
                // Check that recipient's new balance won't exceed max wallet limit
                if (recipientBalance + amount > maxWalletAmount) {
                    revert DOVEErrors.TransferExceedsMaxWalletLimit();
                }
            }
        }
        
        // Handle tiny transfers to prevent dust accumulation due to integer division
        // For the charity fee of 0.5%, any amount less than (10000/50)+1 will result in 0 fee
        uint256 minFeeableAmount = (FeeLibrary.BASIS_POINTS / FeeLibrary.CHARITY_FEE) + 1;
        if (amount < minFeeableAmount) {
            // Transfer without applying fees for tiny amounts
            super._transfer(sender, recipient, amount);
            return;
        }
        
        // Direct internal transfer during fee processing to avoid recursion
        if (_inProcessingFees) {
            super._transfer(sender, recipient, amount);
            return;
        }
        
        // Skip processing for transfers from the fee manager to avoid re-entry issues
        if (sender == address(_feeManager)) {
            super._transfer(sender, recipient, amount);
            return;
        }
        
        // Process fees through fee manager
        _inProcessingFees = true;
        uint256 netAmount = _feeManager.processFees(sender, recipient, amount);
        _inProcessingFees = false;
        
        // Transfer the net amount
        super._transfer(sender, recipient, netAmount);
    }
    
    /**
     * @dev Override ERC20 transfer function to add reentrancy protection
     * @param to Address to transfer to
     * @param amount Amount to transfer
     * @return Success indicator
     */
    function transfer(address to, uint256 amount) public override nonReentrant returns (bool) {
        return super.transfer(to, amount);
    }
    
    /**
     * @dev Override ERC20 transferFrom function to add reentrancy protection
     * @param from Address to transfer from
     * @param to Address to transfer to 
     * @param amount Amount to transfer
     * @return Success indicator
     */
    function transferFrom(address from, address to, uint256 amount) public override nonReentrant returns (bool) {
        return super.transferFrom(from, to, amount);
    }
    
    /**
     * @dev Returns whether the token is paused
     * @return Whether the token is paused
     */
    function paused() public view override(Pausable) returns (bool) {
        return super.paused();
    }
    
    /**
     * @dev ERC20 _beforeTokenTransfer override
     * @param from Address to deduct from
     * @param to Recipient address
     * @param amount Amount to transfer
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal override whenNotPaused {
        super._beforeTokenTransfer(from, to, amount);
    }
}
